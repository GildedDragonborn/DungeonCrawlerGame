import pygame
import random
import math
from typing import List, Tuple
from enemy import enemy
import os
import json
import array

#TODO: this class acts as a single room that is generated by a random floor generator. Implement both


class room:
    def __init__(self, id: int, layer: int, x: int, y: int, enemies: bool):
        self.__roomID = int(id)
        self.__layer = layer
        self.__roomLayout = self.getRoom(id)
        self.__xCoord = x
        self.__yCoord = y
        self.__hostile: bool = enemies
        self.__enemies: List[Tuple[int,int,enemy]] = []  # x,y,Enemytype tuple((0, 0, None))

    def roomID(self) -> int:
        return self.__roomID

    def hostile(self) -> bool:
        return self.__hostile

    def getEnemies(self):
        return self.__enemies

    def xCoord(self) -> int:
        return self.__xCoord

    def yCoord(self) -> int:
        return self.__yCoord

    def setEnemy(self, x: int, y: int, new: enemy):
        for i in self.__enemies:
            if i[0] == x or i[1] == y:
                return
        self.__enemies.append(tuple((x, y, new)))

    def getRoom(self, id: int = 0) -> array:
        with open('GameData/roomData.json') as inFile:
            data = json.load(inFile)
            roomData = data[id]["room"]
            return roomData

    def getTile(self, x: int, y: int) -> int:
        return int(self.__roomLayout[y][x])

    def playerMoveCheck(self, x: int, y:int) -> bool:
        tileID: int = int(self.__roomLayout[y][x])
        return tileID == 0 or tileID == 6 or tileID == 8 or tileID == 10 or tileID == 12 or tileID == 17 or tileID == 18


    def drawRoom(self):
        width = 800
        height = 600
        screen = pygame.display.set_mode((width, height))
        screen.fill((200, 200, 200))
        lineColor = pygame.Color(0, 0, 0, 255)  # RGB alpha
        x = 0
        y = 0
        increment = width / 12
        while x <= width:
            start = [x, 0]
            end = [x, height]
            pygame.draw.line(screen, lineColor, start, end, width=2)
            x += increment
        while y <= height:
            start = [0, y]
            end = [width, y]
            pygame.draw.line(screen, lineColor, start, end, width=2)
            y += increment
        for i in range(12):
            for j in range(9):
                if self.__roomLayout[int(j)][int(i)] == 0:  # Empty Space
                    pass
                elif self.__roomLayout[int(j)][int(i)] == 1:  # Door
                    pass
                elif self.__roomLayout[int(j)][int(i)] == 2:  # Rock
                    screen.blit(pygame.image.load(os.path.join("Assets", "testRock.png")), (int(i)*67, int(j)*67))
                elif self.__roomLayout[int(j)][int(i)] == 3: # Enemy (check enemy list)
                    pass
                elif self.__roomLayout[int(j)][int(i)] == 4: # Hazard
                    pass
                elif self.__roomLayout[int(j)][int(i)] == 5:  # NorthWall
                    screen.blit(pygame.image.load(os.path.join("Assets", "NorthWall.png")), (int(i)*67, int(j)*67))
                elif self.__roomLayout[int(j)][int(i)] == 6:  # NorthDoor
                    screen.blit(pygame.image.load(os.path.join("Assets", "NorthDoor.png")), (int(i)*67, int(j)*67))
                elif self.__roomLayout[int(j)][int(i)] == 7:  # EastWall
                    screen.blit(pygame.image.load(os.path.join("Assets", "EastWall.png")), (int(i)*67, int(j)*67))
                elif self.__roomLayout[int(j)][int(i)] == 8:  # EastDoor
                    screen.blit(pygame.image.load(os.path.join("Assets", "EastDoor.png")), (int(i)*67, int(j)*67))
                elif self.__roomLayout[int(j)][int(i)] == 9:  # SouthWall
                    screen.blit(pygame.image.load(os.path.join("Assets", "SouthWall.png")), (int(i)*67, int(j)*67))
                elif self.__roomLayout[int(j)][int(i)] == 10:  # SouthDoor
                    screen.blit(pygame.image.load(os.path.join("Assets", "SouthDoor.png")), (int(i)*67, int(j)*67))
                elif self.__roomLayout[int(j)][int(i)] == 11:  # WestWall
                    screen.blit(pygame.image.load(os.path.join("Assets", "WestWall.png")), (int(i)*67, int(j)*67))
                elif self.__roomLayout[int(j)][int(i)] == 12:  # WestDoor
                    screen.blit(pygame.image.load(os.path.join("Assets", "WestDoor.png")), (int(i)*67, int(j)*67))
                elif self.__roomLayout[int(j)][int(i)] == 13:  # NWCorner
                    screen.blit(pygame.image.load(os.path.join("Assets", "NorthWestCorner.png")), (int(i)*67, int(j)*67))
                elif self.__roomLayout[int(j)][int(i)] == 14:  # NECorner
                    screen.blit(pygame.image.load(os.path.join("Assets", "NorthEastCorner.png")), (int(i)*67, int(j)*67))
                elif self.__roomLayout[int(j)][int(i)] == 15:  # SECorner
                    screen.blit(pygame.image.load(os.path.join("Assets", "SouthEastCorner.png")), (int(i)*67, int(j)*67))
                elif self.__roomLayout[int(j)][int(i)] == 16:  # SWCorner
                    screen.blit(pygame.image.load(os.path.join("Assets", "SouthWestCorner.png")), (int(i)*67, int(j)*67))
                elif self.__roomLayout[int(j)][int(i)] == 17: # BossdoorL
                    pass
                elif self.__roomLayout[int(j)][int(i)] == 18: # BossdoorR
                    pass

        # use roomLayout to print out the room
        # 0 = blank
        # 1 = 4 doors empty
        # 2 = 3 doors (Up, Left, Down)
        # 3 = 2 doors (Up, Down)
        # 4 = 2 doors (Up, Left)
        # 5 = 2 doors (Down, Left)
        # 6 = End (Up)
        # 7 = End (Down)
        # 8 = End (Left)
        # 9 = 3 doors (Up, Right, Down)
        # 10 = 2 doors (Up, Right)
        # 11 = 2 doors (Down, Right)
        # 12 = End (Right)
        # 13 = Shop
        # 14 = Item Room
        # 15 = Bank
        # 16 = MinibossRoom
        # 17 = bossRoom
